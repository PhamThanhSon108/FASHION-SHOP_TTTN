openapi: 3.0.1
info:
    title: Fashion Shop
    description: 'Fashion Shop Description'
    termsOfService: http://swagger.io/terms/
    contact:
        email: apiteam@swagger.io
    version: 1.0.0
externalDocs:
    description: Find out more about Swagger
    url: http://swagger.io
servers:
    - url: http://localhost:5000/api
tags:
    - name: pet
      description: Everything about your Pets
      externalDocs:
          description: Find out more
          url: http://swagger.io
    - name: User
      description: Everything about your Users
paths:
    /pet:
        put:
            tags:
                - pet
            summary: Update an existing pet
            operationId: updatePet
            requestBody:
                description: Pet object that needs to be added to the store
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                required: true
            responses:
                400:
                    description: Invalid ID supplied
                    content: {}
                404:
                    description: Pet Not Found
                    content: {}
                405:
                    description: Validation exception
                    content: {}
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
            x-codegen-request-body-name: body
        post:
            tags:
                - pet
            summary: Add a new pet to the store
            operationId: addPet
            requestBody:
                description: Pet object that needs to be added to the store
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Pet'
                required: true
            responses:
                405:
                    description: Invalid input
                    content: {}
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
            x-codegen-request-body-name: body
    /pet/findByStatus:
        get:
            tags:
                - pet
            summary: Finds Pets by status
            description: Multiple status values can be provided with comma separated strings
            operationId: findPetsByStatus
            parameters:
                - name: status
                  in: query
                  description: Status values that need to be considered for filter
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: array
                      items:
                          type: string
                          default: available
                          enum:
                              - available
                              - pending
                              - sold
            responses:
                200:
                    description: successful operation
                    content:
                        application/xml:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Pet'
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Pet'
                400:
                    description: Invalid status value
                    content: {}
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /pet/findByTags:
        get:
            tags:
                - pet
            summary: Finds Pets by tags
            description: Muliple tags can be provided with comma separated strings. Use         tag1,
                tag2, tag3 for testing.
            operationId: findPetsByTags
            parameters:
                - name: tags
                  in: query
                  description: Tags to filter by
                  required: true
                  style: form
                  explode: true
                  schema:
                      type: array
                      items:
                          type: string
            responses:
                200:
                    description: successful operation
                    content:
                        application/xml:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Pet'
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Pet'
                400:
                    description: Invalid tag value
                    content: {}
            deprecated: true
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /pet/{petId}:
        get:
            tags:
                - pet
            summary: Find pet by ID
            description: Returns a single pet
            operationId: getPetById
            parameters:
                - name: petId
                  in: path
                  description: ID of pet to return
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                200:
                    description: successful operation
                    content:
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Pet'
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Pet'
                400:
                    description: Invalid ID supplied
                    content: {}
                404:
                    description: Pet Not Found
                    content: {}
            security:
                - api_key: []
        post:
            tags:
                - pet
            summary: Updates a pet in the store with form data
            operationId: updatePetWithForm
            parameters:
                - name: petId
                  in: path
                  description: ID of pet that needs to be updated
                  required: true
                  schema:
                      type: integer
                      format: int64
            requestBody:
                content:
                    application/x-www-form-urlencoded:
                        schema:
                            properties:
                                name:
                                    type: string
                                    description: Updated name of the pet
                                status:
                                    type: string
                                    description: Updated status of the pet
            responses:
                405:
                    description: Invalid input
                    content: {}
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
        delete:
            tags:
                - pet
            summary: Deletes a pet
            operationId: deletePet
            parameters:
                - name: api_key
                  in: header
                  schema:
                      type: string
                - name: petId
                  in: path
                  description: Pet id to delete
                  required: true
                  schema:
                      type: integer
                      format: int64
            responses:
                400:
                    description: Invalid ID supplied
                    content: {}
                404:
                    description: Pet Not Found
                    content: {}
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /pet/{petId}/uploadImage:
        post:
            tags:
                - pet
            summary: uploads an image
            operationId: uploadFile
            parameters:
                - name: petId
                  in: path
                  description: ID of pet to update
                  required: true
                  schema:
                      type: integer
                      format: int64
            requestBody:
                content:
                    multipart/form-data:
                        schema:
                            properties:
                                additionalMetadata:
                                    type: string
                                    description: Additional data to pass to server
                                file:
                                    type: string
                                    description: file to upload
                                    format: binary
            responses:
                200:
                    description: successful operation
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApiResponse'
            security:
                - petstore_auth:
                      - write:pets
                      - read:pets
    /user/login:
        post:
            tags:
                - User
            summary: Login
            requestBody:
                description: User credentials
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    nullable: false
                                password:
                                    type: string
                                    nullable: false
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponseWithAccessToken'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/register:
        post:
            tags:
                - User
            summary: Register
            requestBody:
                description: User object that needs to be added
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    nullable: false
                                email:
                                    type: string
                                    nullable: false
                                password:
                                    type: string
                                    nullable: false
                                phone:
                                    type: string
                                    nullable: false
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/auth/verify-email:
        patch:
            tags:
                - User
            summary: Verify email
            parameters:
                - in: query
                  name: emailVerificationToken
                  required: true
                  schema:
                      type: string
                  description: Email Verification token
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/auth/cancel-verify-email:
        patch:
            tags:
                - User
            summary: Cancel verify email
            parameters:
                - in: query
                  name: emailVerificationToken
                  required: true
                  schema:
                      type: string
                  description: Email Verification token
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/auth/forgot-password:
        patch:
            tags:
                - User
            summary: Forgot password
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    description: Email need to be reset
                                    nullable: false
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/auth/reset-password:
        patch:
            tags:
                - User
            summary: Reset password
            parameters:
                - in: query
                  name: resetPasswordToken
                  required: true
                  schema:
                      type: string
                  description: Reset password token
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                newPassword:
                                    type: string
                                    nullable: false
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/auth/cancel-reset-password:
        patch:
            tags:
                - User
            summary: Cancel reset password
            parameters:
                - in: query
                  name: resetPasswordToken
                  required: true
                  schema:
                      type: string
                  description: Reset password token
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Message'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/auth/change-password:
        patch:
            tags:
                - User
            security:
                - bearerAuth: []
            summary: Change password
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                currentPassword:
                                    type: string
                                    nullable: false
                                newPassword:
                                    type: string
                                    nullable: false
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    accessToken:
                                        type: string
                                        nullable: false
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user/profile:
        get:
            tags:
                - User
            security:
                - bearerAuth: []
            summary: User get profile
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: Not Found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
        put:
            tags:
                - User
            security:
                - bearerAuth: []
            summary: User update profile
            requestBody:
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                name:
                                    type: string
                                    nullable: false
                                email:
                                    type: string
                                    nullable: false
                                phone:
                                    type: string
                                    nullable: false
                                address:
                                    type: string
                                    nullable: false
                                city:
                                    type: string
                                    nullable: false
                                country:
                                    type: string
                                    nullable: false
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/UserResponse'
                '400':
                    description: Bad Request
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '404':
                    description: Not Found
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /user:
        get:
            tags:
                - User
            security:
                - bearerAuth: []
            summary: Admin get all user profiles
            responses:
                '200':
                    description: Success
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
                '401':
                    description: Unauthorized
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '403':
                    description: Forbidden
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
                '500':
                    description: Internal Server Error
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Error'
components:
    schemas:
        Order:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                petId:
                    type: integer
                    format: int64
                quantity:
                    type: integer
                    format: int32
                shipDate:
                    type: string
                    format: date-time
                status:
                    type: string
                    description: Order Status
                    enum:
                        - placed
                        - approved
                        - delivered
                complete:
                    type: boolean
                    default: false
            xml:
                name: Order
        Category:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
            xml:
                name: Category
        UserSample:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                username:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
                email:
                    type: string
                password:
                    type: string
                phone:
                    type: string
                userStatus:
                    type: integer
                    description: User Status
                    format: int32
            xml:
                name: User
        Tag:
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
            xml:
                name: Tag
        Pet:
            required:
                - name
                - photoUrls
            type: object
            properties:
                id:
                    type: integer
                    format: int64
                category:
                    $ref: '#/components/schemas/Category'
                name:
                    type: string
                    example: doggie
                photoUrls:
                    type: array
                    xml:
                        name: photoUrl
                        wrapped: true
                    items:
                        type: string
                tags:
                    type: array
                    xml:
                        name: tag
                        wrapped: true
                    items:
                        $ref: '#/components/schemas/Tag'
                status:
                    type: string
                    description: pet status in the store
                    enum:
                        - available
                        - pending
                        - sold
            xml:
                name: Pet
        ApiResponse:
            type: object
            properties:
                code:
                    type: integer
                    format: int32
                type:
                    type: string
                message:
                    type: string
        Error:
            type: object
            properties:
                message:
                    type: string
                    description: error message
                stack:
                    type: string
                    description: error message description
        Timestamps:
            type: object
            properties:
                createdAt:
                    type: string
                updatedAt:
                    type: string
        UserResponse:
            type: object
            allOf:
                - $ref: '#/components/schemas/Timestamps'
                - type: object
                  properties:
                      _id:
                          type: string
                      name:
                          type: string
                      email:
                          type: string
                      isAdmin:
                          type: boolean
                      role:
                          type: string
                      phone:
                          type: string
                      address:
                          type: string
                      city:
                          type: string
                      country:
                          type: string
        UserResponseWithAccessToken:
            type: object
            allOf:
                - $ref: '#/components/schemas/UserResponse'
                - type: object
                  properties:
                      accessToken:
                          type: string
        User:
            type: object
            allOf:
                - $ref: '#/components/schemas/UserResponseWithAccessToken'
                - type: object
                  properties:
                      password:
                          type: string
                      isVerified:
                          type: boolean
                      emailVerificationToken:
                          type: string
                      resetPasswordToken:
                          type: string
                      resetPasswordTokenExpiryTime:
                          type: integer
        Message:
            type: object
            properties:
                message:
                    type: string

    securitySchemes:
        bearerAuth:
            type: apiKey
            description: '<i>JWT Authorization header using the Bearer scheme.</i> <b>Example</b>: <i><u>Bearer 12345abcdef</u></i>'
            in: header # can be "header", "query" or "cookie"
            name: Authorization # name of the header, query parameter or cookie
# 2) Apply the security globally to all operations
security:
    - bearerAuth: [] # use the same name as above
